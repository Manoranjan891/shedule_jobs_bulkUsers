name: Block Inactive Auth0 Users

on:
  schedule:
    - cron: '38 13 * * *' # Runs daily at midnight UTC
  workflow_dispatch:

jobs:
  block-inactive-users:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Write block_inactive_users.js using echo
        run: |
          echo "// Code Generated by Sidekick is for learning and experimentation purposes only." > block_inactive_users.js
          echo "const axios = require('axios');" >> block_inactive_users.js
          echo "const fs = require('fs');" >> block_inactive_users.js
          echo "const https = require('https');" >> block_inactive_users.js
          echo "const dayjs = require('dayjs');" >> block_inactive_users.js
          echo "const zlib = require('zlib');" >> block_inactive_users.js
          echo "const readline = require('readline');" >> block_inactive_users.js
          echo "" >> block_inactive_users.js
          echo "const AUTH0_DOMAIN        = process.env.AUTH0_DOMAIN;" >> block_inactive_users.js
          echo "const AUTH0_CLIENT_ID     = process.env.AUTH0_CLIENT_ID;" >> block_inactive_users.js
          echo "const AUTH0_CLIENT_SECRET = process.env.AUTH0_CLIENT_SECRET;" >> block_inactive_users.js
          echo "const INACTIVE_DAYS       = 7; // Block users inactive for 7 days" >> block_inactive_users.js
          echo "" >> block_inactive_users.js
          echo "// Rate limit aware axios wrapper" >> block_inactive_users.js
          echo "async function axiosWithRetry(config, retries = 5) {" >> block_inactive_users.js
          echo "  for (let attempt = 0; attempt < retries; attempt++) {" >> block_inactive_users.js
          echo "    try {" >> block_inactive_users.js
          echo "      return await axios(config);" >> block_inactive_users.js
          echo "    } catch (err) {" >> block_inactive_users.js
          echo "      if (err.response && err.response.status === 429) {" >> block_inactive_users.js
          echo "        const retryAfter = parseInt(err.response.headers['retry-after'] || '5', 10);" >> block_inactive_users.js
          echo "        console.warn(\`Rate limited. Waiting \${retryAfter} seconds before retrying...\`);" >> block_inactive_users.js
          echo "        await new Promise(r => setTimeout(r, retryAfter * 1000));" >> block_inactive_users.js
          echo "      } else {" >> block_inactive_users.js
          echo "        throw err;" >> block_inactive_users.js
          echo "      }" >> block_inactive_users.js
          echo "    }" >> block_inactive_users.js
          echo "  }" >> block_inactive_users.js
          echo "  throw new Error('Max retries exceeded for axios request');" >> block_inactive_users.js
          echo "}" >> block_inactive_users.js
          echo "" >> block_inactive_users.js
          echo "async function getAuth0Token() {" >> block_inactive_users.js
          echo "  const url = \`https://\${AUTH0_DOMAIN}/oauth/token\`;" >> block_inactive_users.js
          echo "  const body = {" >> block_inactive_users.js
          echo "    client_id: AUTH0_CLIENT_ID," >> block_inactive_users.js
          echo "    client_secret: AUTH0_CLIENT_SECRET," >> block_inactive_users.js
          echo "    audience: \`https://\${AUTH0_DOMAIN}/api/v2/\`," >> block_inactive_users.js
          echo "    grant_type: 'client_credentials'" >> block_inactive_users.js
          echo "  };" >> block_inactive_users.js
          echo "  const { data } = await axiosWithRetry({" >> block_inactive_users.js
          echo "    method: 'post'," >> block_inactive_users.js
          echo "    url," >> block_inactive_users.js
          echo "    data: body," >> block_inactive_users.js
          echo "    headers: { 'content-type': 'application/json' }" >> block_inactive_users.js
          echo "  });" >> block_inactive_users.js
          echo "  return data.access_token;" >> block_inactive_users.js
          echo "}" >> block_inactive_users.js
          echo "" >> block_inactive_users.js
          echo "async function startExportJob(token) {" >> block_inactive_users.js
          echo "  const url = \`https://\${AUTH0_DOMAIN}/api/v2/jobs/users-exports\`;" >> block_inactive_users.js
          echo "  const body = {" >> block_inactive_users.js
          echo "    format: \"json\"," >> block_inactive_users.js
          echo "    fields: [" >> block_inactive_users.js
          echo "      { name: \"user_id\" }," >> block_inactive_users.js
          echo "      { name: \"last_login\" }" >> block_inactive_users.js
          echo "    ]" >> block_inactive_users.js
          echo "  };" >> block_inactive_users.js
          echo "  const { data } = await axiosWithRetry({" >> block_inactive_users.js
          echo "    method: 'post'," >> block_inactive_users.js
          echo "    url," >> block_inactive_users.js
          echo "    data: body," >> block_inactive_users.js
          echo "    headers: { Authorization: \`Bearer \${token}\` }" >> block_inactive_users.js
          echo "  });" >> block_inactive_users.js
          echo "  return data.id;" >> block_inactive_users.js
          echo "}" >> block_inactive_users.js
          echo "" >> block_inactive_users.js
          echo "async function pollExportJob(token, jobId) {" >> block_inactive_users.js
          echo "  const url = \`https://\${AUTH0_DOMAIN}/api/v2/jobs/\${jobId}\`;" >> block_inactive_users.js
          echo "  let status = \"pending\";" >> block_inactive_users.js
          echo "  let location = null;" >> block_inactive_users.js
          echo "  while (status === \"pending\" || status === \"processing\") {" >> block_inactive_users.js
          echo "    const { data } = await axiosWithRetry({" >> block_inactive_users.js
          echo "      method: 'get'," >> block_inactive_users.js
          echo "      url," >> block_inactive_users.js
          echo "      headers: { Authorization: \`Bearer \${token}\` }" >> block_inactive_users.js
          echo "    });" >> block_inactive_users.js
          echo "    status = data.status;" >> block_inactive_users.js
          echo "    if (status === \"completed\") {" >> block_inactive_users.js
          echo "      location = data.location;" >> block_inactive_users.js
          echo "      break;" >> block_inactive_users.js
          echo "    } else if (status === \"failed\") {" >> block_inactive_users.js
          echo "      throw new Error(\"Export job failed\");" >> block_inactive_users.js
          echo "    }" >> block_inactive_users.js
          echo "    await new Promise(r => setTimeout(r, 5000)); // Wait 5 seconds before polling again" >> block_inactive_users.js
          echo "  }" >> block_inactive_users.js
          echo "  return location;" >> block_inactive_users.js
          echo "}" >> block_inactive_users.js
          echo "" >> block_inactive_users.js
          echo "async function downloadExportFile(url, outputPath) {" >> block_inactive_users.js
          echo "  return new Promise((resolve, reject) => {" >> block_inactive_users.js
          echo "    const file = fs.createWriteStream(outputPath);" >> block_inactive_users.js
          echo "    https.get(url, (response) => {" >> block_inactive_users.js
          echo "      response.pipe(file);" >> block_inactive_users.js
          echo "      file.on('finish', () => file.close(resolve));" >> block_inactive_users.js
          echo "    }).on('error', reject);" >> block_inactive_users.js
          echo "  });" >> block_inactive_users.js
          echo "}" >> block_inactive_users.js
          echo "" >> block_inactive_users.js
          echo "async function blockUser(token, userId) {" >> block_inactive_users.js
          echo "  const url = \`https://\${AUTH0_DOMAIN}/api/v2/users/\${encodeURIComponent(userId)}\`;" >> block_inactive_users.js
          echo "  try {" >> block_inactive_users.js
          echo "    await axiosWithRetry({" >> block_inactive_users.js
          echo "      method: 'patch'," >> block_inactive_users.js
          echo "      url," >> block_inactive_users.js
          echo "      data: { blocked: true }," >> block_inactive_users.js
          echo "      headers: { Authorization: \`Bearer \${token}\` }" >> block_inactive_users.js
          echo "    });" >> block_inactive_users.js
          echo "    console.log(\`Blocked user: \${userId}\`);" >> block_inactive_users.js
          echo "  } catch (err) {" >> block_inactive_users.js
          echo "    console.error(\`Failed to block user \${userId}:\`, err.response?.data || err.message);" >> block_inactive_users.js
          echo "  }" >> block_inactive_users.js
          echo "}" >> block_inactive_users.js
          echo "" >> block_inactive_users.js
          echo "async function processExportFile(token, filePath) {" >> block_inactive_users.js
          echo "  const stream = fs.createReadStream(filePath).pipe(zlib.createGunzip());" >> block_inactive_users.js
          echo "  const rl = readline.createInterface({ input: stream });" >> block_inactive_users.js
          echo "" >> block_inactive_users.js
          echo "  for await (const line of rl) {" >> block_inactive_users.js
          echo "    if (!line.trim()) continue;" >> block_inactive_users.js
          echo "    const user = JSON.parse(line);" >> block_inactive_users.js
          echo "    if (user.last_login) {" >> block_inactive_users.js
          echo "      const lastLoginDate = dayjs(user.last_login);" >> block_inactive_users.js
          echo "      if (dayjs().diff(lastLoginDate, 'day') >= INACTIVE_DAYS) {" >> block_inactive_users.js
          echo "        await blockUser(token, user.user_id);" >> block_inactive_users.js
          echo "      }" >> block_inactive_users.js
          echo "    }" >> block_inactive_users.js
          echo "  }" >> block_inactive_users.js
          echo "}" >> block_inactive_users.js
          echo "" >> block_inactive_users.js
          echo "async function main() {" >> block_inactive_users.js
          echo "  const token = await getAuth0Token();" >> block_inactive_users.js
          echo "  console.log(\"Starting export job...\");" >> block_inactive_users.js
          echo "  const jobId = await startExportJob(token);" >> block_inactive_users.js
          echo "  console.log(\`Export job started: \${jobId}\`);" >> block_inactive_users.js
          echo "  const location = await pollExportJob(token, jobId);" >> block_inactive_users.js
          echo "  console.log(\`Export job completed. Downloading file from: \${location}\`);" >> block_inactive_users.js
          echo "  const exportPath = \"auth0_users.json.gz\";" >> block_inactive_users.js
          echo "  await downloadExportFile(location, exportPath);" >> block_inactive_users.js
          echo "  console.log(\"Download complete. Processing users...\");" >> block_inactive_users.js
          echo "  await processExportFile(token, exportPath);" >> block_inactive_users.js
          echo "  console.log(\"Done.\");" >> block_inactive_users.js
          echo "}" >> block_inactive_users.js
          echo "" >> block_inactive_users.js
          echo "main().catch(err => {" >> block_inactive_users.js
          echo "  console.error(\"Fatal error:\", err);" >> block_inactive_users.js
          echo "  process.exit(1);" >> block_inactive_users.js
          echo "});" >> block_inactive_users.js

      - name: Install dependencies
        run: npm install axios dayjs

      - name: Run block_inactive_users.js
        env:
          AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
          AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
          AUTH0_CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET }}
        run: node block_inactive_users.js
